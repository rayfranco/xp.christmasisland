// Generated by CoffeeScript 1.3.3
(function() {

  if (!(typeof $ !== "undefined" && $ !== null)) {
    throw "jQuery is not installed";
  }

  $(function() {
    var camera, htracker, material, nerve, p, pX, pY, pZ, particle, particleCount, particleSystem, particles, pointLight, render, renderer, scene, sceneCanvas, soundOptions, track1, track2, track3, trackerCanvas, trackerVideo, trackrStatuses, _i;
    nerve = .5;
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    sceneCanvas = document.getElementById('scene');
    renderer = new THREE.WebGLRenderer({
      canvas: sceneCanvas
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    trackerCanvas = document.getElementById('trackerCanvas');
    trackerVideo = document.getElementById('trackerVideo');
    htracker = new headtrackr.Tracker({
      ui: false,
      headPosition: true,
      calcAngles: false
    });
    htracker.init(trackerVideo, trackerCanvas);
    htracker.start();
    pointLight = new THREE.PointLight(0x0000FF);
    pointLight.position.x = 10;
    pointLight.position.y = 50;
    pointLight.position.z = 130;
    scene.add(pointLight);
    camera.position.z = 50;
    camera.position.y = 50;
    particleCount = 5000;
    particles = new THREE.Geometry();
    material = new THREE.ParticleBasicMaterial({
      size: 10,
      map: THREE.ImageUtils.loadTexture("assets/particle.png"),
      blending: THREE.AdditiveBlending,
      depthTest: false,
      transparent: true
    });
    for (p = _i = 0; 0 <= particleCount ? _i < particleCount : _i > particleCount; p = 0 <= particleCount ? ++_i : --_i) {
      pX = Math.random() * 500 - 250;
      pY = Math.random() * 500 - 250;
      pZ = Math.random() * 500 - 250;
      particle = new THREE.Vector3(pX, pY, pZ);
      particle.velocity = new THREE.Vector3(0, -Math.random(), 0);
      particles.vertices.push(particle);
    }
    particleSystem = new THREE.ParticleSystem(particles, material);
    particleSystem.sortParticles = true;
    scene.add(particleSystem);
    if (!(typeof buzz !== "undefined" && buzz !== null)) {
      throw "Buzz is not installed";
    }
    soundOptions = {
      preload: true,
      autoplay: false,
      loop: true
    };
    track1 = new buzz.sound('assets/loop1.wav', soundOptions);
    track2 = new buzz.sound('assets/loop2.wav', soundOptions);
    track3 = new buzz.sound('assets/loop3.wav', soundOptions);
    buzz.all().bindOnce('canplaythrough', function() {
      console.log('canplaythrough');
      return buzz.all().play();
    });
    track1.setVolume(100);
    track2.setVolume(20);
    track3.setVolume(0);
    console.log(buzz.all());
    render = function() {
      var h, i, time, _j, _results;
      TWEEN.update();
      requestAnimationFrame(render);
      renderer.render(scene, camera);
      time = Date.now() * 0.00005;
      h = (360 * (1.0 + time) % 360) / 360;
      material.color.setHSV(h, 1.0, 1.0);
      _results = [];
      for (i = _j = 0; 0 <= particleCount ? _j < particleCount : _j > particleCount; i = 0 <= particleCount ? ++_j : --_j) {
        particle = particles.vertices[i];
        if (particle.y < -200) {
          particle.y = 200;
        }
        new TWEEN.Tween(particle).to({
          x: particle.x + Math.random() * (nerve - 50) * 1000,
          y: particle.y + Math.random() * (nerve - 50) * 100
        }, .2);
        _results.push(particle.addSelf(particle.velocity));
      }
      return _results;
    };
    render();
    trackrStatuses = {
      "getUserMedia": "You got that camera",
      "no getUserMedia": "u shy ? Turn that camera on...",
      "camera found": "Camera is working",
      "no camera": "Hey, u dat shy ?",
      "detecting": "Don't hide, tryin to find u...",
      "found": "Gotcha ! You can move now :)",
      "lost": "Hey !! Where are ya ??",
      "redetecting": "Tryin to find you again"
    };
    document.addEventListener('headtrackrStatus', function(e) {
      if (e.status in trackrStatuses) {
        return console.log(trackrStatuses[e.status]);
      }
    });
    document.addEventListener('facetrackingEvent', function(e) {
      var percentX, percentY;
      percentX = nerve = e.x / 320;
      percentY = e.y / 240;
      new TWEEN.Tween(camera.position).to({
        x: -percentX * 200,
        y: percentY * 200
      }, 980).easing(TWEEN.Easing.Cubic.Out).onUpdate(function() {}).start();
      track1.setVolume(percentX * 100);
      track2.setVolume(100 - percentX * 100);
      return track3.setVolume(100 - percentX * 150);
    });
    return window.camera = camera;
  });

}).call(this);
